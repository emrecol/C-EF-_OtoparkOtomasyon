<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>